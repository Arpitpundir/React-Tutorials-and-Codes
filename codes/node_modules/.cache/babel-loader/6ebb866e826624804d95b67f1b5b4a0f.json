{"ast":null,"code":"import React, { Component } from 'react';\nimport Person from \"./Person/Person\";\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { useState } from \"react\"; // class  App extends Component {\n//   //render\n//   //only required method in react, can returns a no of things, react will call this method to\n//   //render some html codes, every react component must render some code to the webpage\n//   state = {\n//     person:[\n//       {name: \"Arpit\", age: \"19\"},\n//       {name: \"Jai\", age: \"23\"},\n//       {name: \"Piyush\", age: \"20\"}\n//     ]\n//   }\n//   switchPersons = () => {\n//     //this.state.person[0].name = \"Prachi\"\n//     //we should not change the state directly react will not recognize that\n//     //we will use setState method for this \n//     //React will only overwrite the content of the state which was change but will not change\n//     //the properties which were same i.e it merges them\n//     this.setState({\n//       person:[\n//         {name: \"Arpit Pundir\", age: \"19\"},\n//         {name: \"Jai\", age: \"22\"},\n//         {name: \"Piyush\", age: \"20\"}\n//       ]\n//     })\n//   }\n//   render(){\n//     return (\n//     <div className=\"App\">\n//       <h1>Hi I am react app</h1>\n//       <p>This is really working</p>\n//       <button onClick = {this.switchPersons}>Switch</button>\n//       {/* <Person name  = \"Mike\" age = \"25\"/>\n//       <Person name = \"Maria\" age = \"24\"/>\n//       <Person name = \"John\" age = \"26\"/> */}\n//       <Person name = {this.state.person[0].name} age = {this.state.person[0].age}/>\n//       <Person name = {this.state.person[1].name} age = {this.state.person[1].age}/>\n//       <Person name = {this.state.person[2].name} age = {this.state.person[2].age}/>\n//     </div>\n//   );\n//   }\n// }\n//now we will do the same above thing with the help of functional components by using hooks\n\n/*const App = props => {\n  //useState is a hook which takes a state object as an input and returns an array having two object \n  //first is the state object and second is the handler which can be used to edit this state object\n  const [personState, setPersonState] = useState({\n    persons: [{\n        name: \"Max\",\n        age: 28\n      },\n      {\n        name: \"jai\",\n        age: \"23\"\n      },\n      {\n        name: \"piyush\",\n        age: \"20\"\n      }\n    ]\n  });\n  //Diffrence in merging\n  //when we use functional components react do not merge states properties byitself, either we create\n  //an individual state object for every state property or we pass all states manually when we update\n  //any state\n  const [otherState, setOtherState] = useState(\"I am fine by this\");\n  //lets define a function which can be used to update the name on the page on button click\n  //in this handler we will use the function which is provided by use State to change the per\n  //-son state\n  const switchNameHandler = () => {\n    setPersonState({\n      persons: [{\n          name: \"Arpit\",\n          age: 19\n        },\n        {\n          name: \"jai\",\n          age: \"23\"\n        },\n        {\n          name: \"piyush\",\n          age: \"20\"\n        }\n      ]\n    });\n  }\n  return (\n    <div className=\"App\">\n        <h1>Hi I am react app</h1>\n        <p>This is really working</p>\n        {//as we are not using class component in this component so we can not use this keyword\n        }\n        <button onClick = {switchNameHandler}>Switch</button>\n        {/* <Person name  = \"Mike\" age = \"25\"/>\n        <Person name = \"Maria\" age = \"24\"/>\n        <Person name = \"John\" age = \"26\"/> }\n        <Person name = {personState.persons[0].name} age = {personState.persons[0].age}/>\n        <Person name = {personState.persons[1].name} age = {personState.persons[1].age}/>\n        <Person name = {personState.persons[2].name} age = {personState.persons[2].age}/>\n    </div>\n  );\n}\n*/\n\nexport default App;","map":{"version":3,"sources":["/home/arpit/Documents/React/codes/src/App.js"],"names":["React","Component","Person","useState","App"],"mappings":"AAAA,OAAOA,KAAP,IACEC,SADF,QAEO,OAFP;AAGA,OAAOC,MAAP,MAAmB,iBAAnB;;AAEA,OAAO,WAAP;AACA,SACEC,QADF,QAEO,OAFP,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA,eAAeC,GAAf","sourcesContent":["import React, {\n  Component\n} from 'react';\nimport Person from \"./Person/Person\"\nimport logo from './logo.svg';\nimport './App.css';\nimport {\n  useState\n} from \"react\";\n// class  App extends Component {\n//   //render\n//   //only required method in react, can returns a no of things, react will call this method to\n//   //render some html codes, every react component must render some code to the webpage\n//   state = {\n//     person:[\n//       {name: \"Arpit\", age: \"19\"},\n//       {name: \"Jai\", age: \"23\"},\n//       {name: \"Piyush\", age: \"20\"}\n//     ]\n//   }\n\n//   switchPersons = () => {\n//     //this.state.person[0].name = \"Prachi\"\n//     //we should not change the state directly react will not recognize that\n//     //we will use setState method for this \n//     //React will only overwrite the content of the state which was change but will not change\n//     //the properties which were same i.e it merges them\n//     this.setState({\n//       person:[\n//         {name: \"Arpit Pundir\", age: \"19\"},\n//         {name: \"Jai\", age: \"22\"},\n//         {name: \"Piyush\", age: \"20\"}\n//       ]\n//     })\n//   }\n//   render(){\n//     return (\n//     <div className=\"App\">\n//       <h1>Hi I am react app</h1>\n//       <p>This is really working</p>\n//       <button onClick = {this.switchPersons}>Switch</button>\n//       {/* <Person name  = \"Mike\" age = \"25\"/>\n//       <Person name = \"Maria\" age = \"24\"/>\n//       <Person name = \"John\" age = \"26\"/> */}\n//       <Person name = {this.state.person[0].name} age = {this.state.person[0].age}/>\n//       <Person name = {this.state.person[1].name} age = {this.state.person[1].age}/>\n//       <Person name = {this.state.person[2].name} age = {this.state.person[2].age}/>\n//     </div>\n\n//   );\n//   }\n// }\n\n//now we will do the same above thing with the help of functional components by using hooks\n/*const App = props => {\n  //useState is a hook which takes a state object as an input and returns an array having two object \n  //first is the state object and second is the handler which can be used to edit this state object\n  const [personState, setPersonState] = useState({\n    persons: [{\n        name: \"Max\",\n        age: 28\n      },\n      {\n        name: \"jai\",\n        age: \"23\"\n      },\n      {\n        name: \"piyush\",\n        age: \"20\"\n      }\n    ]\n  });\n  //Diffrence in merging\n  //when we use functional components react do not merge states properties byitself, either we create\n  //an individual state object for every state property or we pass all states manually when we update\n  //any state\n  const [otherState, setOtherState] = useState(\"I am fine by this\");\n  //lets define a function which can be used to update the name on the page on button click\n  //in this handler we will use the function which is provided by use State to change the per\n  //-son state\n  const switchNameHandler = () => {\n    setPersonState({\n      persons: [{\n          name: \"Arpit\",\n          age: 19\n        },\n        {\n          name: \"jai\",\n          age: \"23\"\n        },\n        {\n          name: \"piyush\",\n          age: \"20\"\n        }\n      ]\n    });\n  }\n  return (\n    <div className=\"App\">\n        <h1>Hi I am react app</h1>\n        <p>This is really working</p>\n        {//as we are not using class component in this component so we can not use this keyword\n        }\n        <button onClick = {switchNameHandler}>Switch</button>\n        {/* <Person name  = \"Mike\" age = \"25\"/>\n        <Person name = \"Maria\" age = \"24\"/>\n        <Person name = \"John\" age = \"26\"/> }\n        <Person name = {personState.persons[0].name} age = {personState.persons[0].age}/>\n        <Person name = {personState.persons[1].name} age = {personState.persons[1].age}/>\n        <Person name = {personState.persons[2].name} age = {personState.persons[2].age}/>\n    </div>\n  );\n}\n*/\nexport default App;"]},"metadata":{},"sourceType":"module"}