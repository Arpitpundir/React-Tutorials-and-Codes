{"ast":null,"code":"var _jsxFileName = \"/home/arpit/Documents/React/codes/src/containers/App.js\";\nimport React, { Component } from 'react';\nimport Persons from \"../components/Persons/Persons\";\nimport './App.css';\nimport { useState } from \"react\";\n\nclass App extends Component {\n  constructor(props) {}\n\n  render() {\n    const style = {\n      backgroundColor: \"White\",\n      cursor: \"pointer\",\n      border: \"1px solid black\" //above we are using inline styling we create a js object and then we use this object in component \n      //we want to by using style property\n\n    };\n    var persons = null;\n\n    if (this.state.showPersons) {\n      persons = React.createElement(Persons, {\n        persons: this.state.persons,\n        changed: this.nameChangeHandler,\n        clicked: this.deletePerson,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Hi I am react app\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"This is really working\"), React.createElement(\"button\", {\n      style: style,\n      onClick: this.togglePersons,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Switch\"), persons);\n  }\n\n}\n\n;\nexport default App; //Important\n//render\n//only required method in react, can returns a no of things, react will call this method to\n//render some html codes, every react component must render some code to the webpage\n//this.state.person[0].name = \"Prachi\"\n//we should not change the state directly react will not recognize that\n//we will use setState method for this \n//React will only overwrite the content of the state which was change but will not change\n//the properties which were same i.e it merges them\n//Two way binding\n\n/*now when we want to pass some value also to the switchPerson handler then either we \n        can use wrapping or we can use bind:: bind calls the function on which it is specified as this \n        value is set to the given value and second value is a list of arguments.*/\n\n/*{this.state.showPersons === true ?\n      <div>\n      <Person name = {this.state.person[0].name} age = {this.state.person[0].age} click = {this.switchPersons}\n      changed = {this.changeName}/>\n      <Person name = {this.state.person[1].name} age = {this.state.person[1].age}/>\n      <Person name = {this.state.person[2].name} age = {this.state.person[2].age}/>\n      </div>\n      : null}*/\n//now we will do the same above thing with the help of functional components by using hooks\n\n/*const App = props => {\n  //useState is a hook which takes a state object as an input and returns an array having two object \n  //first is the state object and second is the handler which can be used to edit this state object\n  const [personState, setPersonState] = useState({\n    persons: [{\n        name: \"Max\",\n        age: 28\n      },\n      {\n        name: \"jai\",\n        age: \"23\"\n      },\n      {\n        name: \"piyush\",\n        age: \"20\"\n      }\n    ]\n  });\n  //Diffrence in merging\n  //when we use functional components react do not merge states properties byitself, either we create\n  //an individual state object for every state property or we pass all states manually when we update\n  //any state\n  const [otherState, setOtherState] = useState(\"I am fine by this\");\n  //lets define a function which can be used to update the name on the page on button click\n  //in this handler we will use the function which is provided by use State to change the per\n  //-son state\n  const switchNameHandler = () => {\n    setPersonState({\n      persons: [{\n          name: \"Arpit\",\n          age: 19\n        },\n        {\n          name: \"jai\",\n          age: \"23\"\n        },\n        {\n          name: \"piyush\",\n          age: \"20\"\n        }\n      ]\n    });\n  }\n  return (\n    <div className=\"App\">\n        <h1>Hi I am react app</h1>\n        <p>This is really working</p>\n        {//as we are not using class component in this component so we can not use this keyword\n        }\n        <button onClick = {switchNameHandler}>Switch</button>\n        {/* <Person name  = \"Mike\" age = \"25\"/>\n        <Person name = \"Maria\" age = \"24\"/>\n        <Person name = \"John\" age = \"26\"/> }\n        <Person name = {personState.persons[0].name} age = {personState.persons[0].age}/>\n        <Person name = {personState.persons[1].name} age = {personState.persons[1].age}/>\n        <Person name = {personState.persons[2].name} age = {personState.persons[2].age}/>\n    </div>\n  );\n}\n*/","map":{"version":3,"sources":["/home/arpit/Documents/React/codes/src/containers/App.js"],"names":["React","Component","Persons","useState","App","constructor","props","render","style","backgroundColor","cursor","border","persons","state","showPersons","nameChangeHandler","deletePerson","togglePersons"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,OAAP,MAAoB,+BAApB;AACA,OAAO,WAAP;AACA,SAAQC,QAAR,QAAuB,OAAvB;;AACA,MAAOC,GAAP,SAAmBH,SAAnB,CAA6B;AAE3BI,EAAAA,WAAW,CAACC,KAAD,EACb,CAEC;;AAkDCC,EAAAA,MAAM,GAAE;AACN,UAAMC,KAAK,GAAG;AACZC,MAAAA,eAAe,EAAE,OADL;AAEZC,MAAAA,MAAM,EAAE,SAFI;AAGZC,MAAAA,MAAM,EAAC,iBAHK,CAMd;AACA;;AAPc,KAAd;AASA,QAAIC,OAAO,GAAG,IAAd;;AACA,QAAG,KAAKC,KAAL,CAAWC,WAAd,EAA0B;AACxBF,MAAAA,OAAO,GAAG,oBAAC,OAAD;AAAS,QAAA,OAAO,EAAI,KAAKC,KAAL,CAAWD,OAA/B;AAAwC,QAAA,OAAO,EAAI,KAAKG,iBAAxD;AAA2E,QAAA,OAAO,EAAI,KAAKC,YAA3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAV;AACD;;AACD,WACA;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAFF,EAGE;AAAQ,MAAA,KAAK,EAAIR,KAAjB;AAAwB,MAAA,OAAO,EAAI,KAAKS,aAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,EAIGL,OAJH,CADA;AAUD;;AA/E0B;;AAgF5B;AAED,eAAeR,GAAf,C,CAEA;AACA;AACA;AACA;AAEC;AACD;AACA;AACA;AACA;AAIA;;AACA;;;;AAIE;;;;;;;;AAUF;;AACA","sourcesContent":["import React, {Component} from 'react';\nimport Persons from \"../components/Persons/Persons\";\nimport './App.css';\nimport {useState} from \"react\";\nclass  App extends Component {\n\n  constructor(props)\n{\n  \n}  state = {\n    persons:[\n      {name: \"Arpit\", id:\"asdf1\", age: \"19\"},\n      {name: \"Jai\", id: \"asdf2\", age: \"23\"},\n      {name: \"Piyush\", id : \"asdf3\", age: \"20\"}\n    ],\n    showPersons: false\n  }\n\n  switchPersons = (newName) => {\n    this.setState({\n      persons:[\n        {name: newName, age: \"19\"},\n        {name: \"Jai\", age: \"22\"},\n        {name: \"Piyush\", age: \"20\"}\n      ]\n    })\n  };\n\n  nameChangeHandler = (e, id) =>{\n    console.log(id);\n    const personIndex = this.state.persons.findIndex(p => {\n      return p.id === id;\n    });\n\n    const person = {\n      ...this.state.persons[personIndex]\n    };\n\n    person.name = e.target.value;\n    const persons = this.state.persons;\n    persons[personIndex] = person;\n\n    this.setState({\n      persons: persons\n    })\n  };\n\n  togglePersons = ()=>{\n    const doesShow = this.state.showPersons;\n    this.setState({showPersons: !doesShow});\n  };\n\n  deletePerson = (index) => {\n    console.log(index);\n    const persons = this.state.persons;\n    persons.splice(index, 1);\n    this.setState({persons: persons})\n  }\n\n  render(){\n    const style = {\n      backgroundColor: \"White\",\n      cursor: \"pointer\",\n      border:\"1px solid black\"\n    }\n\n    //above we are using inline styling we create a js object and then we use this object in component \n    //we want to by using style property\n\n    var persons = null;\n    if(this.state.showPersons){\n      persons = <Persons persons = {this.state.persons} changed = {this.nameChangeHandler} clicked = {this.deletePerson}></Persons>\n    }\n    return (\n    <div className=\"App\">\n      <h1>Hi I am react app</h1>\n      <p>This is really working</p>\n      <button style = {style} onClick = {this.togglePersons}>Switch</button>\n      {persons}\n\n    </div> \n\n  );\n  }\n};\n\nexport default App;\n\n//Important\n//render\n//only required method in react, can returns a no of things, react will call this method to\n//render some html codes, every react component must render some code to the webpage\n\n //this.state.person[0].name = \"Prachi\"\n//we should not change the state directly react will not recognize that\n//we will use setState method for this \n//React will only overwrite the content of the state which was change but will not change\n//the properties which were same i.e it merges them\n\n\n\n//Two way binding\n/*now when we want to pass some value also to the switchPerson handler then either we \n        can use wrapping or we can use bind:: bind calls the function on which it is specified as this \n        value is set to the given value and second value is a list of arguments.*/\n\n  /*{this.state.showPersons === true ?\n        <div>\n        <Person name = {this.state.person[0].name} age = {this.state.person[0].age} click = {this.switchPersons}\n        changed = {this.changeName}/>\n        <Person name = {this.state.person[1].name} age = {this.state.person[1].age}/>\n        <Person name = {this.state.person[2].name} age = {this.state.person[2].age}/>\n        </div>\n        : null}*/\n\n\n//now we will do the same above thing with the help of functional components by using hooks\n/*const App = props => {\n  //useState is a hook which takes a state object as an input and returns an array having two object \n  //first is the state object and second is the handler which can be used to edit this state object\n  const [personState, setPersonState] = useState({\n    persons: [{\n        name: \"Max\",\n        age: 28\n      },\n      {\n        name: \"jai\",\n        age: \"23\"\n      },\n      {\n        name: \"piyush\",\n        age: \"20\"\n      }\n    ]\n  });\n  //Diffrence in merging\n  //when we use functional components react do not merge states properties byitself, either we create\n  //an individual state object for every state property or we pass all states manually when we update\n  //any state\n  const [otherState, setOtherState] = useState(\"I am fine by this\");\n  //lets define a function which can be used to update the name on the page on button click\n  //in this handler we will use the function which is provided by use State to change the per\n  //-son state\n  const switchNameHandler = () => {\n    setPersonState({\n      persons: [{\n          name: \"Arpit\",\n          age: 19\n        },\n        {\n          name: \"jai\",\n          age: \"23\"\n        },\n        {\n          name: \"piyush\",\n          age: \"20\"\n        }\n      ]\n    });\n  }\n  return (\n    <div className=\"App\">\n        <h1>Hi I am react app</h1>\n        <p>This is really working</p>\n        {//as we are not using class component in this component so we can not use this keyword\n        }\n        <button onClick = {switchNameHandler}>Switch</button>\n        {/* <Person name  = \"Mike\" age = \"25\"/>\n        <Person name = \"Maria\" age = \"24\"/>\n        <Person name = \"John\" age = \"26\"/> }\n        <Person name = {personState.persons[0].name} age = {personState.persons[0].age}/>\n        <Person name = {personState.persons[1].name} age = {personState.persons[1].age}/>\n        <Person name = {personState.persons[2].name} age = {personState.persons[2].age}/>\n    </div>\n  );\n}\n*/"]},"metadata":{},"sourceType":"module"}