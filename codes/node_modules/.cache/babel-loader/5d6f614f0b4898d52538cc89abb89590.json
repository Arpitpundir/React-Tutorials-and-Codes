{"ast":null,"code":"var _jsxFileName = \"/home/arpit/Documents/React/codes/src/components/Persons/Person/Person.js\";\nimport React, { Component } from \"react\";\nimport classes from \"./Person.module.css\";\nimport Aux from \"./../../../hoc/Aux\";\nimport withClass from \"./../../../hoc/withClass\";\nimport AuthContext from \"./../../../context/auth-context\";\n\nclass Person extends Component {\n  constructor(props) {\n    super(props);\n    this.inputElementRef = React.createRef();\n  }\n\n  componentDidMount() {\n    //this.inputElement.focus();\n    this.inputElementRef.current.focus();\n  }\n\n  render() {\n    console.log(\"render Person\");\n    return (// <AuthContext.Consumer>\n      //     {\n      //         (context) => {\n      //             return (\n      //                 <Aux>\n      //                     <h1 onClick = {this.props.click}>I am {this.props.name} and I am {this.props.age}</h1>\n      //                     { context.authenticated == true?\"Authenticated\" : \"Please Login\"}\n      //                     <input className = \"centeredText\"\n      //                     type = \"text\"\n      //                     value = {\n      //                         this.props.name\n      //                     }\n      //                     onChange = {\n      //                         this.props.changed\n      //                     }\n      //                     ///ref = {(inputEl) => {\n      //                     // this.inputElement = inputEl;\n      //                     //}}\n      //                     ref = {this.inputElementRef} \n      //                     >\n      //                     </input>\n      // </Aux>\n      //             )\n      //         }\n      //     }\n      // </AuthContext.Consumer>\n      React.createElement(Aux, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        onClick: this.props.click,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \" I am \", this.props.name, \"and I am \", this.props.age, \" \"), this.context.authenticated == true ? \"Authenticated\" : \"Please Login\", React.createElement(\"input\", {\n        className: \"centeredText\",\n        type: \"text\",\n        value: this.props.name,\n        onChange: this.props.changed,\n        ref: inputEl => {\n          this.inputElement = inputEl;\n        },\n        ref: this.inputElementRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }))\n    );\n  }\n\n}\n\nPerson.context = AuthContext;\n;\nexport default withClass(Person, classes.Person);\n/*Above we have used two way binding i.e we have provided value as well as we are also changing the value*/\n\n/*this section was used to know what is the flow in which react calls the lefeCycle methods \nstatic getDerivedStateFromProps(props, state){\n        console.log(\"getDerivedStateFromProps Person\");\n        return null;\n    };\n\n    shouldComponentUpdate(nextProps, nextState){\n        console.log(\"shouldComponentUpdate person\");\n        return true;\n    };\n\n    getSnapshotBeforeUpdate(prevProps, prevState){\n        console.log(\"getSnapshotBeforeUpdate Person\");\n        return null;\n    }\n\n    componentDidUpdate(prevProps, prevState){\n        console.log(\"componentDidUpdate Person\");\n    }*/","map":{"version":3,"sources":["/home/arpit/Documents/React/codes/src/components/Persons/Person/Person.js"],"names":["React","Component","classes","Aux","withClass","AuthContext","Person","constructor","props","inputElementRef","createRef","componentDidMount","current","focus","render","console","log","click","name","age","context","authenticated","changed","inputEl","inputElement"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,GAAP,MAAgB,oBAAhB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,WAAP,MAAwB,iCAAxB;;AAEA,MAAMC,MAAN,SAAsBL,SAAtB,CAA+B;AAG3BM,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,eAAL,GAAuBT,KAAK,CAACU,SAAN,EAAvB;AACH;;AAEDC,EAAAA,iBAAiB,GAAE;AACf;AACA,SAAKF,eAAL,CAAqBG,OAArB,CAA6BC,KAA7B;AACH;;AACDC,EAAAA,MAAM,GAAE;AACJC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,WACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,OAAO,EACP,KAAKR,KAAL,CAAWS,KADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGI,KAAKT,KAAL,CAAWU,IAHf,eAMA,KAAKV,KAAL,CAAWW,GANX,MADJ,EASE,KAAKC,OAAL,CAAaC,aAAb,IAA8B,IAA9B,GAAmC,eAAnC,GAAqD,cATvD,EAUA;AAAO,QAAA,SAAS,EAAG,cAAnB;AACA,QAAA,IAAI,EAAG,MADP;AAEA,QAAA,KAAK,EACD,KAAKb,KAAL,CAAWU,IAHf;AAKA,QAAA,QAAQ,EACJ,KAAKV,KAAL,CAAWc,OANf;AAQA,QAAA,GAAG,EACEC,OAAD,IAAa;AACT,eAAKC,YAAL,GAAoBD,OAApB;AACH,SAXL;AAaA,QAAA,GAAG,EACK,KAAKd,eAdb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAVA;AA3BJ;AAwDH;;AAtE0B;;AAAzBH,M,CAEKc,O,GAAUf,W;AAsEpB;AAED,eAAeD,SAAS,CAACE,MAAD,EAASJ,OAAO,CAACI,MAAjB,CAAxB;AAEA;;AACA","sourcesContent":["import React, {Component} from \"react\";\nimport classes from \"./Person.module.css\";\nimport Aux from \"./../../../hoc/Aux\";\nimport withClass from \"./../../../hoc/withClass\";\nimport AuthContext from \"./../../../context/auth-context\";\n\nclass Person extends  Component{\n\n    static context = AuthContext;\n    constructor(props){\n        super(props);\n        this.inputElementRef = React.createRef();\n    }\n    \n    componentDidMount(){\n        //this.inputElement.focus();\n        this.inputElementRef.current.focus();\n    }\n    render(){\n        console.log(\"render Person\")\n        return (\n            // <AuthContext.Consumer>\n            //     {\n            //         (context) => {\n            //             return (\n            //                 <Aux>\n            //                     <h1 onClick = {this.props.click}>I am {this.props.name} and I am {this.props.age}</h1>\n            //                     { context.authenticated == true?\"Authenticated\" : \"Please Login\"}\n            //                     <input className = \"centeredText\"\n            //                     type = \"text\"\n            //                     value = {\n            //                         this.props.name\n            //                     }\n            //                     onChange = {\n            //                         this.props.changed\n            //                     }\n            //                     ///ref = {(inputEl) => {\n            //                     // this.inputElement = inputEl;\n            //                     //}}\n            //                     ref = {this.inputElementRef} \n            //                     >\n            //                     </input>\n            // </Aux>\n            //             )\n            //         }\n            //     }\n            // </AuthContext.Consumer>\n            <Aux>\n                <h1 onClick = {\n                    this.props.click\n                } > I am {\n                    this.props.name\n                }\n            and I am {\n                this.props.age\n            } </h1>                     \n            { this.context.authenticated == true?\"Authenticated\" : \"Please Login\"} \n            <input className = \"centeredText\"\n            type = \"text\"\n            value = {\n                this.props.name\n            }\n            onChange = {\n                this.props.changed\n            }\n            ref = {\n                (inputEl) => {\n                    this.inputElement = inputEl;\n                }\n            }\n            ref = {\n                    this.inputElementRef\n                } >\n                </input> \n            </Aux>\n        );\n    }\n    \n};\n\nexport default withClass(Person, classes.Person);\n\n/*Above we have used two way binding i.e we have provided value as well as we are also changing the value*/\n/*this section was used to know what is the flow in which react calls the lefeCycle methods \nstatic getDerivedStateFromProps(props, state){\n        console.log(\"getDerivedStateFromProps Person\");\n        return null;\n    };\n\n    shouldComponentUpdate(nextProps, nextState){\n        console.log(\"shouldComponentUpdate person\");\n        return true;\n    };\n\n    getSnapshotBeforeUpdate(prevProps, prevState){\n        console.log(\"getSnapshotBeforeUpdate Person\");\n        return null;\n    }\n\n    componentDidUpdate(prevProps, prevState){\n        console.log(\"componentDidUpdate Person\");\n    }*/"]},"metadata":{},"sourceType":"module"}