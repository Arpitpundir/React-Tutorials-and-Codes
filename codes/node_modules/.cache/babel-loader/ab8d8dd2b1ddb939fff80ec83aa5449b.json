{"ast":null,"code":"var _jsxFileName = \"/home/arpit/Documents/React/codes/src/App.js\";\nimport React, { Component } from 'react';\nimport Person from \"./Person/Person\";\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { useState } from \"react\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      person: [{\n        name: \"Arpit\",\n        age: \"19\"\n      }, {\n        name: \"Jai\",\n        age: \"23\"\n      }, {\n        name: \"Piyush\",\n        age: \"20\"\n      }]\n    };\n\n    this.switchPersons = newName => {\n      //this.state.person[0].name = \"Prachi\"\n      //we should not change the state directly react will not recognize that\n      //we will use setState method for this \n      //React will only overwrite the content of the state which was change but will not change\n      //the properties which were same i.e it merges them\n      this.setState({\n        person: [{\n          name: newName,\n          age: \"19\"\n        }, {\n          name: \"Jai\",\n          age: \"22\"\n        }, {\n          name: \"Piyush\",\n          age: \"20\"\n        }]\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"Hi I am react app\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"This is really working\"), React.createElement(\"button\", {\n      onClick: this.switchPersons.bind(this, \"Mat\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"Switch\"), React.createElement(\"button\", {\n      onClick: () => this.switchPersons(\"Joe\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }), React.createElement(Person, {\n      name: this.state.person[0].name,\n      age: this.state.person[0].age,\n      click: this.switchPersons,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), React.createElement(Person, {\n      name: this.state.person[1].name,\n      age: this.state.person[1].age,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }), React.createElement(Person, {\n      name: this.state.person[2].name,\n      age: this.state.person[2].age,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }));\n  }\n\n} //now we will do the same above thing with the help of functional components by using hooks\n\n/*const App = props => {\n  //useState is a hook which takes a state object as an input and returns an array having two object \n  //first is the state object and second is the handler which can be used to edit this state object\n  const [personState, setPersonState] = useState({\n    persons: [{\n        name: \"Max\",\n        age: 28\n      },\n      {\n        name: \"jai\",\n        age: \"23\"\n      },\n      {\n        name: \"piyush\",\n        age: \"20\"\n      }\n    ]\n  });\n  //Diffrence in merging\n  //when we use functional components react do not merge states properties byitself, either we create\n  //an individual state object for every state property or we pass all states manually when we update\n  //any state\n  const [otherState, setOtherState] = useState(\"I am fine by this\");\n  //lets define a function which can be used to update the name on the page on button click\n  //in this handler we will use the function which is provided by use State to change the per\n  //-son state\n  const switchNameHandler = () => {\n    setPersonState({\n      persons: [{\n          name: \"Arpit\",\n          age: 19\n        },\n        {\n          name: \"jai\",\n          age: \"23\"\n        },\n        {\n          name: \"piyush\",\n          age: \"20\"\n        }\n      ]\n    });\n  }\n  return (\n    <div className=\"App\">\n        <h1>Hi I am react app</h1>\n        <p>This is really working</p>\n        {//as we are not using class component in this component so we can not use this keyword\n        }\n        <button onClick = {switchNameHandler}>Switch</button>\n        {/* <Person name  = \"Mike\" age = \"25\"/>\n        <Person name = \"Maria\" age = \"24\"/>\n        <Person name = \"John\" age = \"26\"/> }\n        <Person name = {personState.persons[0].name} age = {personState.persons[0].age}/>\n        <Person name = {personState.persons[1].name} age = {personState.persons[1].age}/>\n        <Person name = {personState.persons[2].name} age = {personState.persons[2].age}/>\n    </div>\n  );\n}\n*/\n\n\nexport default App;","map":{"version":3,"sources":["/home/arpit/Documents/React/codes/src/App.js"],"names":["React","Component","Person","useState","App","state","person","name","age","switchPersons","newName","setState","render","bind"],"mappings":";AAAA,OAAOA,KAAP,IACEC,SADF,QAEO,OAFP;AAGA,OAAOC,MAAP,MAAmB,iBAAnB;;AAEA,OAAO,WAAP;AACA,SACEC,QADF,QAEO,OAFP;;AAGE,MAAOC,GAAP,SAAmBH,SAAnB,CAA6B;AAAA;AAAA;AAAA,SAIzBI,KAJyB,GAIjB;AACNC,MAAAA,MAAM,EAAC,CACL;AAACC,QAAAA,IAAI,EAAE,OAAP;AAAgBC,QAAAA,GAAG,EAAE;AAArB,OADK,EAEL;AAACD,QAAAA,IAAI,EAAE,KAAP;AAAcC,QAAAA,GAAG,EAAE;AAAnB,OAFK,EAGL;AAACD,QAAAA,IAAI,EAAE,QAAP;AAAiBC,QAAAA,GAAG,EAAE;AAAtB,OAHK;AADD,KAJiB;;AAAA,SAY3BC,aAZ2B,GAYVC,OAAD,IAAa;AAC3B;AACA;AACA;AACA;AACA;AACA,WAAKC,QAAL,CAAc;AACZL,QAAAA,MAAM,EAAC,CACL;AAACC,UAAAA,IAAI,EAAEG,OAAP;AAAgBF,UAAAA,GAAG,EAAE;AAArB,SADK,EAEL;AAACD,UAAAA,IAAI,EAAE,KAAP;AAAcC,UAAAA,GAAG,EAAE;AAAnB,SAFK,EAGL;AAACD,UAAAA,IAAI,EAAE,QAAP;AAAiBC,UAAAA,GAAG,EAAE;AAAtB,SAHK;AADK,OAAd;AAOD,KAzB0B;AAAA;;AA2B3BI,EAAAA,MAAM,GAAE;AACN,WACA;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAFF,EAME;AAAQ,MAAA,OAAO,EAAI,KAAKH,aAAL,CAAmBI,IAAnB,CAAwB,IAAxB,EAA8B,KAA9B,CAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANF,EAOE;AAAQ,MAAA,OAAO,EAAI,MAAM,KAAKJ,aAAL,CAAmB,KAAnB,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,EAWE,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAI,KAAKJ,KAAL,CAAWC,MAAX,CAAkB,CAAlB,EAAqBC,IAArC;AAA2C,MAAA,GAAG,EAAI,KAAKF,KAAL,CAAWC,MAAX,CAAkB,CAAlB,EAAqBE,GAAvE;AAA4E,MAAA,KAAK,EAAI,KAAKC,aAA1F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXF,EAcE,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAI,KAAKJ,KAAL,CAAWC,MAAX,CAAkB,CAAlB,EAAqBC,IAArC;AAA2C,MAAA,GAAG,EAAI,KAAKF,KAAL,CAAWC,MAAX,CAAkB,CAAlB,EAAqBE,GAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdF,EAeE,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAI,KAAKH,KAAL,CAAWC,MAAX,CAAkB,CAAlB,EAAqBC,IAArC;AAA2C,MAAA,GAAG,EAAI,KAAKF,KAAL,CAAWC,MAAX,CAAkB,CAAlB,EAAqBE,GAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfF,CADA;AAoBD;;AAhD0B,C,CAkD/B;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA,eAAeJ,GAAf","sourcesContent":["import React, {\n  Component\n} from 'react';\nimport Person from \"./Person/Person\"\nimport logo from './logo.svg';\nimport './App.css';\nimport {\n  useState\n} from \"react\";\n  class  App extends Component {\n    //render\n    //only required method in react, can returns a no of things, react will call this method to\n    //render some html codes, every react component must render some code to the webpage\n      state = {\n        person:[\n          {name: \"Arpit\", age: \"19\"},\n          {name: \"Jai\", age: \"23\"},\n          {name: \"Piyush\", age: \"20\"}\n        ]\n      }\n\n    switchPersons = (newName) => {\n      //this.state.person[0].name = \"Prachi\"\n      //we should not change the state directly react will not recognize that\n      //we will use setState method for this \n      //React will only overwrite the content of the state which was change but will not change\n      //the properties which were same i.e it merges them\n      this.setState({\n        person:[\n          {name: newName, age: \"19\"},\n          {name: \"Jai\", age: \"22\"},\n          {name: \"Piyush\", age: \"20\"}\n        ]\n      })\n    }\n    const \n    render(){\n      return (\n      <div className=\"App\">\n        <h1>Hi I am react app</h1>\n        <p>This is really working</p>\n        {/*now when we want to pass some value also to the switchPerson handler then either we \n        can use wrapping or we can use bind:: bind calls the function on which it is specified as this \n        value is set to the given value and second value is a list of arguments.*/}\n        <button onClick = {this.switchPersons.bind(this, \"Mat\")}>Switch</button>\n        <button onClick = {() => this.switchPersons(\"Joe\")}></button>\n        {/* <Person name  = \"Mike\" age = \"25\"/>\n                <Person name = \"Maria\" age = \"24\"/>\n        <Person name = \"John\" age = \"26\"/> */}\n        <Person name = {this.state.person[0].name} age = {this.state.person[0].age} click = {this.switchPersons}/>\n        {//above we have passed app class methods as a property to the person component\n        }\n        <Person name = {this.state.person[1].name} age = {this.state.person[1].age}/>\n        <Person name = {this.state.person[2].name} age = {this.state.person[2].age}/>\n      </div>\n\n    );\n    }\n  }\n//now we will do the same above thing with the help of functional components by using hooks\n/*const App = props => {\n  //useState is a hook which takes a state object as an input and returns an array having two object \n  //first is the state object and second is the handler which can be used to edit this state object\n  const [personState, setPersonState] = useState({\n    persons: [{\n        name: \"Max\",\n        age: 28\n      },\n      {\n        name: \"jai\",\n        age: \"23\"\n      },\n      {\n        name: \"piyush\",\n        age: \"20\"\n      }\n    ]\n  });\n  //Diffrence in merging\n  //when we use functional components react do not merge states properties byitself, either we create\n  //an individual state object for every state property or we pass all states manually when we update\n  //any state\n  const [otherState, setOtherState] = useState(\"I am fine by this\");\n  //lets define a function which can be used to update the name on the page on button click\n  //in this handler we will use the function which is provided by use State to change the per\n  //-son state\n  const switchNameHandler = () => {\n    setPersonState({\n      persons: [{\n          name: \"Arpit\",\n          age: 19\n        },\n        {\n          name: \"jai\",\n          age: \"23\"\n        },\n        {\n          name: \"piyush\",\n          age: \"20\"\n        }\n      ]\n    });\n  }\n  return (\n    <div className=\"App\">\n        <h1>Hi I am react app</h1>\n        <p>This is really working</p>\n        {//as we are not using class component in this component so we can not use this keyword\n        }\n        <button onClick = {switchNameHandler}>Switch</button>\n        {/* <Person name  = \"Mike\" age = \"25\"/>\n        <Person name = \"Maria\" age = \"24\"/>\n        <Person name = \"John\" age = \"26\"/> }\n        <Person name = {personState.persons[0].name} age = {personState.persons[0].age}/>\n        <Person name = {personState.persons[1].name} age = {personState.persons[1].age}/>\n        <Person name = {personState.persons[2].name} age = {personState.persons[2].age}/>\n    </div>\n  );\n}\n*/\nexport default App;"]},"metadata":{},"sourceType":"module"}