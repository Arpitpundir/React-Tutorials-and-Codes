{"ast":null,"code":"import _slicedToArray from \"/home/arpit/Documents/React/codes/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/arpit/Documents/React/codes/src/App.js\";\nimport React, { Component } from 'react';\nimport Person from \"./Person/Person\";\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { useState } from \"react\"; // class  App extends Component {\n//   //render\n//   //only required method in react, can returns a no of things, react will call this method to\n//   //render some html codes, every react component must render some code to the webpage\n//   state = {\n//     person:[\n//       {name: \"Arpit\", age: \"19\"},\n//       {name: \"Jai\", age: \"23\"},\n//       {name: \"Piyush\", age: \"20\"}\n//     ]\n//   }\n//   switchPersons = () => {\n//     //this.state.person[0].name = \"Prachi\"\n//     //we should not change the state directly react will not recognize that\n//     //we will use setState method for this \n//     //React will only overwrite the content of the state which was change but will not change\n//     //the properties which were same i.e it merges them\n//     this.setState({\n//       person:[\n//         {name: \"Arpit Pundir\", age: \"19\"},\n//         {name: \"Jai\", age: \"22\"},\n//         {name: \"Piyush\", age: \"20\"}\n//       ]\n//     })\n//   }\n//   render(){\n//     return (\n//     <div className=\"App\">\n//       <h1>Hi I am react app</h1>\n//       <p>This is really working</p>\n//       <button onClick = {this.switchPersons}>Switch</button>\n//       {/* <Person name  = \"Mike\" age = \"25\"/>\n//       <Person name = \"Maria\" age = \"24\"/>\n//       <Person name = \"John\" age = \"26\"/> */}\n//       <Person name = {this.state.person[0].name} age = {this.state.person[0].age}/>\n//       <Person name = {this.state.person[1].name} age = {this.state.person[1].age}/>\n//       <Person name = {this.state.person[2].name} age = {this.state.person[2].age}/>\n//     </div>\n//   );\n//   }\n// }\n//now we will do the same above thing with the help of functional components by using hooks\n\nconst App = props => {\n  //useState is a hook which takes a state object as an input and returns an array having two object \n  //first is the state object and second is the handler which can be used to edit this state object\n  const _useState = useState({\n    persons: [{\n      name: \"Max\",\n      age: 28\n    }, {\n      name: \"jai\",\n      age: \"23\"\n    }, {\n      name: \"piyush\",\n      age: \"20\"\n    }]\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        personState = _useState2[0],\n        setPersonState = _useState2[1]; //Diffrence in merging\n  //\n  //lets define a function which can be used to update the name on the page on button click\n  //in this handler we will use the function which is provided by use State to change the per\n  //-son state\n\n\n  const switchNameHandler = () => {\n    setPersonState({\n      persons: [{\n        name: \"Arpit\",\n        age: 19\n      }, {\n        name: \"jai\",\n        age: \"23\"\n      }, {\n        name: \"piyush\",\n        age: \"20\"\n      }]\n    });\n  };\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"Hi I am react app\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, \"This is really working\"), React.createElement(\"button\", {\n    onClick: switchNameHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \"Switch\"), React.createElement(Person, {\n    name: personState.persons[0].name,\n    age: personState.persons[0].age,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }), React.createElement(Person, {\n    name: personState.persons[1].name,\n    age: personState.persons[1].age,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }), React.createElement(Person, {\n    name: personState.persons[2].name,\n    age: personState.persons[2].age,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/arpit/Documents/React/codes/src/App.js"],"names":["React","Component","Person","useState","App","props","persons","name","age","personState","setPersonState","switchNameHandler"],"mappings":";;AAAA,OAAOA,KAAP,IACEC,SADF,QAEO,OAFP;AAGA,OAAOC,MAAP,MAAmB,iBAAnB;;AAEA,OAAO,WAAP;AACA,SACEC,QADF,QAEO,OAFP,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AACA,MAAMC,GAAG,GAAGC,KAAK,IAAI;AACnB;AACA;AAFmB,oBAGmBF,QAAQ,CAAC;AAC7CG,IAAAA,OAAO,EAAE,CAAC;AACNC,MAAAA,IAAI,EAAE,KADA;AAENC,MAAAA,GAAG,EAAE;AAFC,KAAD,EAIP;AACED,MAAAA,IAAI,EAAE,KADR;AAEEC,MAAAA,GAAG,EAAE;AAFP,KAJO,EAQP;AACED,MAAAA,IAAI,EAAE,QADR;AAEEC,MAAAA,GAAG,EAAE;AAFP,KARO;AADoC,GAAD,CAH3B;AAAA;AAAA,QAGZC,WAHY;AAAA,QAGCC,cAHD,kBAkBnB;AACA;AACA;AACA;AACA;;;AACA,QAAMC,iBAAiB,GAAG,MAAM;AAC9BD,IAAAA,cAAc,CAAC;AACbJ,MAAAA,OAAO,EAAE,CAAC;AACNC,QAAAA,IAAI,EAAE,OADA;AAENC,QAAAA,GAAG,EAAE;AAFC,OAAD,EAIP;AACED,QAAAA,IAAI,EAAE,KADR;AAEEC,QAAAA,GAAG,EAAE;AAFP,OAJO,EAQP;AACED,QAAAA,IAAI,EAAE,QADR;AAEEC,QAAAA,GAAG,EAAE;AAFP,OARO;AADI,KAAD,CAAd;AAeD,GAhBD;;AAiBA,SACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAFJ,EAKI;AAAQ,IAAA,OAAO,EAAIG,iBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,EASI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAIF,WAAW,CAACH,OAAZ,CAAoB,CAApB,EAAuBC,IAAvC;AAA6C,IAAA,GAAG,EAAIE,WAAW,CAACH,OAAZ,CAAoB,CAApB,EAAuBE,GAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ,EAUI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAIC,WAAW,CAACH,OAAZ,CAAoB,CAApB,EAAuBC,IAAvC;AAA6C,IAAA,GAAG,EAAIE,WAAW,CAACH,OAAZ,CAAoB,CAApB,EAAuBE,GAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVJ,EAWI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAIC,WAAW,CAACH,OAAZ,CAAoB,CAApB,EAAuBC,IAAvC;AAA6C,IAAA,GAAG,EAAIE,WAAW,CAACH,OAAZ,CAAoB,CAApB,EAAuBE,GAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXJ,CADF;AAeD,CAvDD;;AAyDA,eAAeJ,GAAf","sourcesContent":["import React, {\n  Component\n} from 'react';\nimport Person from \"./Person/Person\"\nimport logo from './logo.svg';\nimport './App.css';\nimport {\n  useState\n} from \"react\";\n// class  App extends Component {\n//   //render\n//   //only required method in react, can returns a no of things, react will call this method to\n//   //render some html codes, every react component must render some code to the webpage\n//   state = {\n//     person:[\n//       {name: \"Arpit\", age: \"19\"},\n//       {name: \"Jai\", age: \"23\"},\n//       {name: \"Piyush\", age: \"20\"}\n//     ]\n//   }\n\n//   switchPersons = () => {\n//     //this.state.person[0].name = \"Prachi\"\n//     //we should not change the state directly react will not recognize that\n//     //we will use setState method for this \n//     //React will only overwrite the content of the state which was change but will not change\n//     //the properties which were same i.e it merges them\n//     this.setState({\n//       person:[\n//         {name: \"Arpit Pundir\", age: \"19\"},\n//         {name: \"Jai\", age: \"22\"},\n//         {name: \"Piyush\", age: \"20\"}\n//       ]\n//     })\n//   }\n//   render(){\n//     return (\n//     <div className=\"App\">\n//       <h1>Hi I am react app</h1>\n//       <p>This is really working</p>\n//       <button onClick = {this.switchPersons}>Switch</button>\n//       {/* <Person name  = \"Mike\" age = \"25\"/>\n//       <Person name = \"Maria\" age = \"24\"/>\n//       <Person name = \"John\" age = \"26\"/> */}\n//       <Person name = {this.state.person[0].name} age = {this.state.person[0].age}/>\n//       <Person name = {this.state.person[1].name} age = {this.state.person[1].age}/>\n//       <Person name = {this.state.person[2].name} age = {this.state.person[2].age}/>\n//     </div>\n\n//   );\n//   }\n// }\n\n//now we will do the same above thing with the help of functional components by using hooks\nconst App = props => {\n  //useState is a hook which takes a state object as an input and returns an array having two object \n  //first is the state object and second is the handler which can be used to edit this state object\n  const [personState, setPersonState] = useState({\n    persons: [{\n        name: \"Max\",\n        age: 28\n      },\n      {\n        name: \"jai\",\n        age: \"23\"\n      },\n      {\n        name: \"piyush\",\n        age: \"20\"\n      }\n    ]\n  });\n  //Diffrence in merging\n  //\n  //lets define a function which can be used to update the name on the page on button click\n  //in this handler we will use the function which is provided by use State to change the per\n  //-son state\n  const switchNameHandler = () => {\n    setPersonState({\n      persons: [{\n          name: \"Arpit\",\n          age: 19\n        },\n        {\n          name: \"jai\",\n          age: \"23\"\n        },\n        {\n          name: \"piyush\",\n          age: \"20\"\n        }\n      ]\n    });\n  }\n  return (\n    <div className=\"App\">\n        <h1>Hi I am react app</h1>\n        <p>This is really working</p>\n        {//as we are not using class component in this component so we can not use this keyword\n        }\n        <button onClick = {switchNameHandler}>Switch</button>\n        {/* <Person name  = \"Mike\" age = \"25\"/>\n        <Person name = \"Maria\" age = \"24\"/>\n        <Person name = \"John\" age = \"26\"/> */}\n        <Person name = {personState.persons[0].name} age = {personState.persons[0].age}/>\n        <Person name = {personState.persons[1].name} age = {personState.persons[1].age}/>\n        <Person name = {personState.persons[2].name} age = {personState.persons[2].age}/>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}