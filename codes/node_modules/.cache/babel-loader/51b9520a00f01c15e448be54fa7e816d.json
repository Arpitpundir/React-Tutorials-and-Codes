{"ast":null,"code":"import _defineProperty from \"/home/arpit/Documents/React/codes/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/arpit/Documents/React/codes/src/containers/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Persons from \"../components/Persons/Persons\";\nimport './App.css';\nimport { useState, useEffect } from \"react\";\nimport Cockpit from \"./../components/Cockpit/Cockpit\";\nimport withClass from \"./../hoc/withClass\";\nimport Aux from \"./../hoc/Aux\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      persons: [{\n        name: \"Arpit\",\n        id: \"asdf1\",\n        age: \"19\"\n      }, {\n        name: \"Jai\",\n        id: \"asdf2\",\n        age: \"23\"\n      }, {\n        name: \"Piyush\",\n        id: \"asdf3\",\n        age: \"20\"\n      }],\n      showPersons: false,\n      showCockPit: true\n    };\n\n    this.switchPersons = newName => {\n      this.setState({\n        persons: [{\n          name: newName,\n          age: \"19\"\n        }, {\n          name: \"Jai\",\n          age: \"22\"\n        }, {\n          name: \"Piyush\",\n          age: \"20\"\n        }]\n      });\n    };\n\n    this.clicked = () => {\n      this.setState({\n        showCockPit: false\n      });\n    };\n\n    this.nameChangeHandler = (e, id) => {\n      console.log(id);\n      const personIndex = this.state.persons.findIndex(p => {\n        return p.id === id;\n      });\n\n      const person = _objectSpread({}, this.state.persons[personIndex]);\n\n      person.name = e.target.value;\n      const persons = this.state.persons;\n      persons[personIndex] = person;\n      this.setState({\n        persons: persons\n      });\n    };\n\n    this.togglePersons = () => {\n      const doesShow = this.state.showPersons;\n      this.setState({\n        showPersons: !doesShow\n      });\n    };\n\n    this.deletePerson = index => {\n      console.log(index);\n      const persons = this.state.persons;\n      persons.splice(index, 1);\n      this.setState({\n        persons: persons\n      });\n    };\n\n    console.log(\"App.js constructor\");\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    console.log(\"App.js getDerivedStateFromProps\", props);\n    return state;\n  }\n\n  componentWillMount() {\n    console.log(\"App.js componentWillMount\");\n  }\n\n  componentDidMount() {\n    console.log(\"App.js componentDidMount\");\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log(\"shouldComponentUpdate App\");\n    return true;\n  }\n\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    console.log(\"getSnapshotBeforeUpdate App\");\n    return null;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log(\"componentDidUpdate App\");\n  }\n\n  componentWillUnmount() {\n    console.log(\"componentWillUnmount App.js\");\n  }\n\n  render() {\n    console.log(\"App.js render function\");\n    const style = {\n      backgroundColor: \"White\",\n      cursor: \"pointer\",\n      border: \"1px solid black\" //above we are using inline styling we create a js object and then we use this object in component \n      //we want to by using style property\n\n    };\n    var persons = null;\n\n    if (this.state.showPersons) {\n      persons = React.createElement(Persons, {\n        persons: this.state.persons,\n        changed: this.nameChangeHandler,\n        clicked: this.deletePerson,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(Aux, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.clicked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"Remove Cockpit\"), this.state.showCockPit ? React.createElement(Cockpit, {\n      title: this.props.title,\n      showPersons: this.state.showPersons,\n      personsLen: this.state.persons.length,\n      clicked: this.togglePersons,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }) : null, persons);\n  }\n\n}\n\n;\nexport default withClass(App, App); //Important\n//render\n//only required method in react, can returns a no of things, react will call this method to\n//render some html codes, every react component must render some code to the webpage\n//this.state.person[0].name = \"Prachi\"\n//we should not change the state directly react will not recognize that\n//we will use setState method for this \n//React will only overwrite the content of the state which was change but will not change\n//the properties which were same i.e it merges them\n//Two way binding\n\n/*now when we want to pass some value also to the switchPerson handler then either we \n        can use wrapping or we can use bind:: bind calls the function on which it is specified as this \n        value is set to the given value and second value is a list of arguments.*/\n\n/*{this.state.showPersons === true ?\n      <div>\n      <Person name = {this.state.person[0].name} age = {this.state.person[0].age} click = {this.switchPersons}\n      changed = {this.changeName}/>\n      <Person name = {this.state.person[1].name} age = {this.state.person[1].age}/>\n      <Person name = {this.state.person[2].name} age = {this.state.person[2].age}/>\n      </div>\n      : null}*/\n//now we will do the same above thing with the help of functional components by using hooks\n\n/*const App = props => {\n  //useState is a hook which takes a state object as an input and returns an array having two object \n  //first is the state object and second is the handler which can be used to edit this state object\n  const [personState, setPersonState] = useState({\n    persons: [{\n        name: \"Max\",\n        age: 28\n      },\n      {\n        name: \"jai\",\n        age: \"23\"\n      },\n      {\n        name: \"piyush\",\n        age: \"20\"\n      }\n    ]\n  });\n  //Diffrence in merging\n  //when we use functional components react do not merge states properties byitself, either we create\n  //an individual state object for every state property or we pass all states manually when we update\n  //any state\n  const [otherState, setOtherState] = useState(\"I am fine by this\");\n  //lets define a function which can be used to update the name on the page on button click\n  //in this handler we will use the function which is provided by use State to change the per\n  //-son state\n  const switchNameHandler = () => {\n    setPersonState({\n      persons: [{\n          name: \"Arpit\",\n          age: 19\n        },\n        {\n          name: \"jai\",\n          age: \"23\"\n        },\n        {\n          name: \"piyush\",\n          age: \"20\"\n        }\n      ]\n    });\n  }\n  return (\n    <div className=\"App\">\n        <h1>Hi I am react app</h1>\n        <p>This is really working</p>\n        {//as we are not using class component in this component so we can not use this keyword\n        }\n        <button onClick = {switchNameHandler}>Switch</button>\n        {/* <Person name  = \"Mike\" age = \"25\"/>\n        <Person name = \"Maria\" age = \"24\"/>\n        <Person name = \"John\" age = \"26\"/> }\n        <Person name = {personState.persons[0].name} age = {personState.persons[0].age}/>\n        <Person name = {personState.persons[1].name} age = {personState.persons[1].age}/>\n        <Person name = {personState.persons[2].name} age = {personState.persons[2].age}/>\n    </div>\n  );\n}\n*/","map":{"version":3,"sources":["/home/arpit/Documents/React/codes/src/containers/App.js"],"names":["React","Component","Persons","useState","useEffect","Cockpit","withClass","Aux","App","constructor","props","state","persons","name","id","age","showPersons","showCockPit","switchPersons","newName","setState","clicked","nameChangeHandler","e","console","log","personIndex","findIndex","p","person","target","value","togglePersons","doesShow","deletePerson","index","splice","getDerivedStateFromProps","componentWillMount","componentDidMount","shouldComponentUpdate","nextProps","nextState","getSnapshotBeforeUpdate","prevProps","prevState","componentDidUpdate","componentWillUnmount","render","style","backgroundColor","cursor","border","title","length"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Persons from \"../components/Persons/Persons\";\nimport './App.css';\nimport {useState, useEffect} from \"react\";\nimport Cockpit from \"./../components/Cockpit/Cockpit\";\nimport withClass from \"./../hoc/withClass\";\nimport Aux from \"./../hoc/Aux\";\n\nclass  App extends Component {\n\n  constructor(props){\n    super(props);\n    console.log(\"App.js constructor\");\n  };\n\n  state = {\n    persons:[\n      {name: \"Arpit\", id:\"asdf1\", age: \"19\"},\n      {name: \"Jai\", id: \"asdf2\", age: \"23\"},\n      {name: \"Piyush\", id : \"asdf3\", age: \"20\"}\n    ],\n    showPersons: false,\n    showCockPit: true\n  };\n\n  static getDerivedStateFromProps(props, state){\n    console.log(\"App.js getDerivedStateFromProps\", props);\n    return state\n  };\n\n  componentWillMount(){\n    console.log(\"App.js componentWillMount\");\n  };\n\n  componentDidMount(){\n    console.log(\"App.js componentDidMount\");\n  };\n\n  shouldComponentUpdate(nextProps, nextState){\n      console.log(\"shouldComponentUpdate App\");\n      return true;\n  };\n\n  getSnapshotBeforeUpdate(prevProps, prevState){\n      console.log(\"getSnapshotBeforeUpdate App\");\n      return null;\n  };\n\n  componentDidUpdate(prevProps, prevState){\n      console.log(\"componentDidUpdate App\");\n  };\n\n  componentWillUnmount(){\n    console.log(\"componentWillUnmount App.js\");\n  };\n\n  switchPersons = (newName) => {\n    this.setState({\n      persons:[\n        {name: newName, age: \"19\"},\n        {name: \"Jai\", age: \"22\"},\n        {name: \"Piyush\", age: \"20\"}\n      ]\n    })\n  };\n  \n  clicked = () => {\n    this.setState({showCockPit:false});\n  };\n  nameChangeHandler = (e, id) =>{\n    console.log(id);\n    const personIndex = this.state.persons.findIndex(p => {\n      return p.id === id;\n    });\n\n    const person = {\n      ...this.state.persons[personIndex]\n    };\n\n    person.name = e.target.value;\n    const persons = this.state.persons;\n    persons[personIndex] = person;\n\n    this.setState({\n      persons: persons\n    })\n  };\n\n  togglePersons = ()=>{\n    const doesShow = this.state.showPersons;\n    this.setState({showPersons: !doesShow});\n  };\n\n  deletePerson = (index) => {\n    console.log(index);\n    const persons = this.state.persons;\n    persons.splice(index, 1);\n    this.setState({persons: persons})\n  }\n\n  render(){\n    console.log(\"App.js render function\")\n    const style = {\n      backgroundColor: \"White\",\n      cursor: \"pointer\",\n      border:\"1px solid black\"\n    }\n\n    //above we are using inline styling we create a js object and then we use this object in component \n    //we want to by using style property\n\n    var persons = null;\n    if(this.state.showPersons){\n      persons = <Persons persons = {this.state.persons} changed = {this.nameChangeHandler} clicked = {this.deletePerson}></Persons>\n    }\n    return (\n      <Aux>\n      <button onClick = {this.clicked}>Remove Cockpit</button>\n      {\n        this.state.showCockPit ? <Cockpit title = {this.props.title} showPersons = {this.state.showPersons} personsLen = {this.state.persons.length} clicked = {this.togglePersons}></Cockpit>\n      : null\n      }\n      {persons}\n      </Aux>\n  );\n  }\n};\n\nexport default withClass(App, App);\n\n//Important\n//render\n//only required method in react, can returns a no of things, react will call this method to\n//render some html codes, every react component must render some code to the webpage\n\n //this.state.person[0].name = \"Prachi\"\n//we should not change the state directly react will not recognize that\n//we will use setState method for this \n//React will only overwrite the content of the state which was change but will not change\n//the properties which were same i.e it merges them\n\n\n\n//Two way binding\n/*now when we want to pass some value also to the switchPerson handler then either we \n        can use wrapping or we can use bind:: bind calls the function on which it is specified as this \n        value is set to the given value and second value is a list of arguments.*/\n\n  /*{this.state.showPersons === true ?\n        <div>\n        <Person name = {this.state.person[0].name} age = {this.state.person[0].age} click = {this.switchPersons}\n        changed = {this.changeName}/>\n        <Person name = {this.state.person[1].name} age = {this.state.person[1].age}/>\n        <Person name = {this.state.person[2].name} age = {this.state.person[2].age}/>\n        </div>\n        : null}*/\n\n\n//now we will do the same above thing with the help of functional components by using hooks\n/*const App = props => {\n  //useState is a hook which takes a state object as an input and returns an array having two object \n  //first is the state object and second is the handler which can be used to edit this state object\n  const [personState, setPersonState] = useState({\n    persons: [{\n        name: \"Max\",\n        age: 28\n      },\n      {\n        name: \"jai\",\n        age: \"23\"\n      },\n      {\n        name: \"piyush\",\n        age: \"20\"\n      }\n    ]\n  });\n  //Diffrence in merging\n  //when we use functional components react do not merge states properties byitself, either we create\n  //an individual state object for every state property or we pass all states manually when we update\n  //any state\n  const [otherState, setOtherState] = useState(\"I am fine by this\");\n  //lets define a function which can be used to update the name on the page on button click\n  //in this handler we will use the function which is provided by use State to change the per\n  //-son state\n  const switchNameHandler = () => {\n    setPersonState({\n      persons: [{\n          name: \"Arpit\",\n          age: 19\n        },\n        {\n          name: \"jai\",\n          age: \"23\"\n        },\n        {\n          name: \"piyush\",\n          age: \"20\"\n        }\n      ]\n    });\n  }\n  return (\n    <div className=\"App\">\n        <h1>Hi I am react app</h1>\n        <p>This is really working</p>\n        {//as we are not using class component in this component so we can not use this keyword\n        }\n        <button onClick = {switchNameHandler}>Switch</button>\n        {/* <Person name  = \"Mike\" age = \"25\"/>\n        <Person name = \"Maria\" age = \"24\"/>\n        <Person name = \"John\" age = \"26\"/> }\n        <Person name = {personState.persons[0].name} age = {personState.persons[0].age}/>\n        <Person name = {personState.persons[1].name} age = {personState.persons[1].age}/>\n        <Person name = {personState.persons[2].name} age = {personState.persons[2].age}/>\n    </div>\n  );\n}\n*/"]},"metadata":{},"sourceType":"module"}