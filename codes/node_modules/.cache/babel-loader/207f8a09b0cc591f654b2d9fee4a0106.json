{"ast":null,"code":"var _jsxFileName = \"/home/arpit/Documents/React/codes/react-complete-guide--scripts-versions/src/App.js\";\nimport React, { Component } from 'react';\nimport Person from \"./Person/Person\";\nimport logo from \"./logo.svg\";\nimport './App.css';\n\nclass App extends Component {\n  //render\n  //only required method in react, can returns a no of things, react will call this method to\n  //render some html codes, every react component must render some code to the webpage\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }, \"This is react app\"), React.createElement(Person, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }), React.createElement(Person, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }), React.createElement(Person, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    })) //we should give our components a name with capital letter\n    //above code gets converted to the code below \n    // return React.createElement( type,\n    //   [props],\n    //   [...children])\n    //Jsx\n    //above code is jsx which will at the end will gets compiled to React.createElement calls\n    //1. Embedding javascript expression\n    //we can embedd any valid javascript expression inside of jsx using curly braces. For Ex\n    //const name = 'Josh Perez';\n    //const element = <h1>Hello, {name}</h1>;\n    //we have embedded name variable inside of jsx,\n    //In this example we embedd a function call inside of jsx\n    // function formatName(user) {\n    //   return user.firstName + ' ' + user.lastName;\n    // }\n    // const user = {\n    //   firstName: 'Harper',\n    //   lastName: 'Perez'\n    // };\n    // const element = (\n    //   <h1>\n    //     Hello, {formatName(user)}!\n    //   </h1>\n    // );\n    //2. jsx is an expression too \n    //After compilation jsx call becomes regular javascript function calls and evaluate to javascript  objects.\n    //therefore we can use this in if statement and in for loops, assign it to variable and accept it as an argument\n    // function getGreeting(user) {\n    //   if (user) {\n    //     return <h1>Hello, {formatName(user)}!</h1>;\n    //   }\n    //   return <h1>Hello, Stranger.</h1>;\n    // }\n    //3. Jsx may contain childrean\n    // const element = (\n    //   <div>\n    //     <h1>Hello!</h1>\n    //     <h2>Good to see you here.</h2>\n    //   </div>\n    // );\n    ;\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/arpit/Documents/React/codes/react-complete-guide--scripts-versions/src/App.js"],"names":["React","Component","Person","App","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,MAAP,MAAmB,iBAAnB;;AAEA,OAAO,WAAP;;AACA,MAAOC,GAAP,SAAmBF,SAAnB,CAA6B;AAC3B;AACA;AACA;AACAG,EAAAA,MAAM,GAAE;AACN,WACA;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,EAEE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,EAIE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CADA,CAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACG;AACA;AACA;AAEC;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AArDF;AAuDD;;AA5D0B;;AA+D7B,eAAeD,GAAf","sourcesContent":["import React, {Component} from 'react';\nimport Person from \"./Person/Person\"\nimport logo from './logo.svg';\nimport './App.css';\nclass  App extends Component {\n  //render\n  //only required method in react, can returns a no of things, react will call this method to\n  //render some html codes, every react component must render some code to the webpage\n  render(){\n    return (\n    <div className=\"App\">\n      <h1>This is react app</h1>\n      <Person/>\n      <Person/>\n      <Person/>\n    </div>\n    //we should give our components a name with capital letter\n    //above code gets converted to the code below \n    // return React.createElement( type,\n    //   [props],\n    //   [...children])\n    //Jsx\n    //above code is jsx which will at the end will gets compiled to React.createElement calls\n\n    //1. Embedding javascript expression\n    //we can embedd any valid javascript expression inside of jsx using curly braces. For Ex\n       //const name = 'Josh Perez';\n       //const element = <h1>Hello, {name}</h1>;\n       //we have embedded name variable inside of jsx,\n\n        //In this example we embedd a function call inside of jsx\n        // function formatName(user) {\n        //   return user.firstName + ' ' + user.lastName;\n        // }\n\n        // const user = {\n        //   firstName: 'Harper',\n        //   lastName: 'Perez'\n        // };\n\n        // const element = (\n        //   <h1>\n        //     Hello, {formatName(user)}!\n        //   </h1>\n        // );\n\n      //2. jsx is an expression too \n      //After compilation jsx call becomes regular javascript function calls and evaluate to javascript  objects.\n      //therefore we can use this in if statement and in for loops, assign it to variable and accept it as an argument\n      // function getGreeting(user) {\n      //   if (user) {\n      //     return <h1>Hello, {formatName(user)}!</h1>;\n      //   }\n      //   return <h1>Hello, Stranger.</h1>;\n      // }\n\n      //3. Jsx may contain childrean\n      // const element = (\n      //   <div>\n      //     <h1>Hello!</h1>\n      //     <h2>Good to see you here.</h2>\n      //   </div>\n      // );\n  );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}